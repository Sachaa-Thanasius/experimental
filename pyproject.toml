[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "experimental"
description = "Code transformations activated via `from __experimental__` imports."
requires-python = ">=3.10"
version = "2024.07.15"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Sachaa-Thanasius", email = "111999343+Sachaa-Thanasius@users.noreply.github.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]

[project.optional-dependencies]
dev = ["coverage", "covdefaults", "pytest", "typing-extensions"]

[project.urls]
Documentation = "https://github.com/Sachaa-Thanasius/experimental#readme"
Issues = "https://github.com/Sachaa-Thanasius/experimental/issues"
Source = "https://github.com/Sachaa-Thanasius/experimental"

[tool.hatch.build.targets.wheel]
packages = ["src/__experimental__"]

[tool.hatch.build.targets.wheel.hooks.autorun]
# Install the import hook to automatically register experimental's finder.
dependencies = ["hatch-autorun"]
code = """
try:
    import __experimental__
except ImportError:
    pass
else:
    __experimental__.install_experimental_import_hook()
"""


# ---- Testing config

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.hatch-test]
extra-dependencies = ["covdefaults"]

[tool.pytest.ini_options]
pythonpath = "src"
addopts = ["--import-mode=importlib", "--strict-markers", "--strict-config"]

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["__experimental__", "tests"]
omit = ["tests/sample_late_bound_arg.py"]

[tool.coverage.paths]
__experimental__ = ["src"]

[tool.coverage.report]
# It's a work in progress.
fail_under = 70
exclude_lines = ["^\\s*(?:el)?if TYPE_CHECKING:$"]

# ---- Linting config

[tool.ruff]
include = ["src/__experimental__/**/*.py"]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
typing-modules = ["src/__experimental__/_typing_compat.py"]
select = [
    "F",
    "E",
    "I",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "EM",
    "ISC",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "RSE",
    "RET",
    "SIM",
    "TID",
    "PTH",
    "ERA",
    "PL",
    "TRY",
    "RUF",
]
ignore = [
    "S101",   # Use of assert here is a known quantity for typing cases. All uses should be safe to optimize out.
    "SIM105", # Suppressable exception. contextlib.suppress is a stylistic choice with overhead.
    "C90",    # McCabe complexity.
    "ANN101", # Type of Self for self is usually implicit and/or known by the type-checker.
    "ANN102", # Type of type[Self] for cls is usually implicit and/or known by the type-checker.
    "ANN204", # Special method return types are usually implicit and/or known by type checker.
    "ANN401", # Any is needed for some parameters.
    "UP038",  # isinstance performs better with tuples than unions.
    "PT001",  # pytest recommends against empty parentheses on pytest.fixture.
    "PYI036", # Bug with annotations for __exit__.
    "PD011",  # Erroneous issue that triggers for any .values attribute access at all.
    # Recommended by Ruff when using Ruff format.
    "E111",
    "E114",
    "E117",
    "COM812",
    "COM819",
    "E501",
    "ISC001",
    "ISC002",
    # -- Project-specific rules.
    "A002",   # A little built-in shadowing.
    "ERA001", # Ignore commented code for now.
]
unfixable = [
    "ERA", # I don't want anything erroneously detected deleted by this.
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/*" = [
    "T201",    # Printing is fine.
    "ANN",     # Don't need many type annotations, especially return ones; they'll be provided as needed.
    "PLR0913", # Too many parameters.
    "PLR2004", # Magic value comparison.
    "F841",    # Unused variable.
    "F401",    # Unused import.
    "S102",    # Use of exec.
    "S307",    # Use of eval.
]
"scripts/*" = [
    "T201",    # Printing is fine.
    "ANN",     # Don't need many type annotations.
    "PLR0913", # Too many parameters.
    "INP001",  # No __init__.py
]

[tool.ruff.lint.isort]
lines-after-imports = 2
combine-as-imports = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true


# ---- Type-checking config

[tool.pyright]
include = ["src/__experimental__"]
ignore = ["tests/test_utils.py"]
pythonVersion = "3.10"
pythonPlatform = "All"
typeCheckingMode = "strict"

defineConstant = { "TYPING" = true }

reportPrivateUsage = "none"                    # We're the package; of course we're accessing internals.
reportUnnecessaryIsInstance = "none"           # We should account for garbage input from users.
reportUninitializedInstanceVariable = "none"   # Nice as an infrequent checkup, but usually noisy.
reportCallInDefaultInitializer = "warning"
reportImplicitOverride = "warning"
reportImportCycles = "warning"                 # Nice as an infrequent checkup, but "if TYPE_CHECKING" causes false positives.
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
